###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union

from . import types
from .types import Checked, Check

###############################################################################
#
#  These types are used for streaming, for when an instance of a type
#  is still being built up and any of its fields is not yet fully available.
#
###############################################################################

T = TypeVar('T')
class StreamState(BaseModel, Generic[T]):
    value: T
    state: Literal["Pending", "Incomplete", "Complete"]


class CompanyDetails(BaseModel):
    name: Optional[str] = None
    corporate_identity_number: Optional[str] = None
    qr_code_url: Optional[str] = None
    website_link: Optional[str] = None

class DirectRetrievalResponse(BaseModel):
    ai_output: Optional[str] = None
    relevant_pages: List[str]

class FactsFromPages(BaseModel):
    facts: List[str]

class FinalVerdict(BaseModel):
    flag_status: Optional[types.FlagStatus] = None
    detailed_reasoning: Optional[str] = None
    citations: List[str]

class IsTocPage(BaseModel):
    isTocPage: Optional[bool] = None

class PageNumber(BaseModel):
    is_page_number: Optional[bool] = None
    page_number: Optional[str] = None

class PeopleInfo(BaseModel):
    name: Optional[str] = None
    designation: Optional[str] = None

class QueriesFromPages(BaseModel):
    Queries: List[str]

class Resume(BaseModel):
    name: Optional[str] = None
    email: Optional[str] = None
    experience: List[str]
    skills: List[str]

class RetrievalAndVerdictQueries(BaseModel):
    hypothetical_factual_responses: List[str]

class RetrievalResponses(BaseModel):
    hypothetical_factual_responses: List[str]

class SimpleRetrievalResponse(BaseModel):
    ai_output: Optional[str] = None
    relevant_pages: List[str]

class TocContent(BaseModel):
    toc_entries: List[str]
    toc_text: Optional[str] = None
