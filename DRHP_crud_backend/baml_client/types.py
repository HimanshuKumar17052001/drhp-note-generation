###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import baml_py
from enum import Enum

from pydantic import BaseModel, ConfigDict

from typing_extensions import TypeAlias, Literal
from typing import Dict, Generic, List, Optional, TypeVar, Union


T = TypeVar('T')
CheckName = TypeVar('CheckName', bound=str)

class Check(BaseModel):
    name: str
    expression: str
    status: str
class Checked(BaseModel, Generic[T,CheckName]):
    value: T
    checks: Dict[CheckName, Check]

def get_checks(checks: Dict[CheckName, Check]) -> List[Check]:
    return list(checks.values())

def all_succeeded(checks: Dict[CheckName, Check]) -> bool:
    return all(check.status == "succeeded" for check in get_checks(checks))



class FlagStatus(str, Enum):
    
    FLAGGED = "FLAGGED"
    NOT_FLAGGED = "NOT_FLAGGED"

class CompanyDetails(BaseModel):
    name: str
    corporate_identity_number: str
    qr_code_url: str
    website_link: str

class DirectRetrievalResponse(BaseModel):
    ai_output: str
    relevant_pages: List[str]

class FactsFromPages(BaseModel):
    facts: List[str]

class FinalVerdict(BaseModel):
    flag_status: "FlagStatus"
    detailed_reasoning: str
    citations: List[str]

class IsTocPage(BaseModel):
    isTocPage: bool

class PageNumber(BaseModel):
    is_page_number: bool
    page_number: str

class PeopleInfo(BaseModel):
    name: str
    designation: str

class QueriesFromPages(BaseModel):
    Queries: List[str]

class Resume(BaseModel):
    name: str
    email: str
    experience: List[str]
    skills: List[str]

class RetrievalAndVerdictQueries(BaseModel):
    hypothetical_factual_responses: List[str]

class RetrievalResponses(BaseModel):
    hypothetical_factual_responses: List[str]

class SimpleRetrievalResponse(BaseModel):
    ai_output: str
    relevant_pages: List[str]

class TocContent(BaseModel):
    toc_entries: List[str]
    toc_text: str
