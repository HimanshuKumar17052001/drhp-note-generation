###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
import typing
from baml_py.baml_py import FieldType, EnumValueBuilder, EnumBuilder, ClassBuilder
from baml_py.type_builder import TypeBuilder as _TypeBuilder, ClassPropertyBuilder, ClassPropertyViewer, EnumValueViewer
from .globals import DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME


class TypeBuilder(_TypeBuilder):
    def __init__(self):
        super().__init__(classes=set(
          ["CompanyDetails","DirectRetrievalResponse","FactsFromPages","FinalVerdict","IsTocPage","PageNumber","PeopleInfo","QueriesFromPages","Resume","RetrievalAndVerdictQueries","RetrievalResponses","SimpleRetrievalResponse","TocContent",]
        ), enums=set(
          ["FlagStatus",]
        ), runtime=DO_NOT_USE_DIRECTLY_UNLESS_YOU_KNOW_WHAT_YOURE_DOING_RUNTIME)


    @property
    def CompanyDetails(self) -> "CompanyDetailsAst":
        return CompanyDetailsAst(self)

    @property
    def DirectRetrievalResponse(self) -> "DirectRetrievalResponseAst":
        return DirectRetrievalResponseAst(self)

    @property
    def FactsFromPages(self) -> "FactsFromPagesAst":
        return FactsFromPagesAst(self)

    @property
    def FinalVerdict(self) -> "FinalVerdictAst":
        return FinalVerdictAst(self)

    @property
    def IsTocPage(self) -> "IsTocPageAst":
        return IsTocPageAst(self)

    @property
    def PageNumber(self) -> "PageNumberAst":
        return PageNumberAst(self)

    @property
    def PeopleInfo(self) -> "PeopleInfoAst":
        return PeopleInfoAst(self)

    @property
    def QueriesFromPages(self) -> "QueriesFromPagesAst":
        return QueriesFromPagesAst(self)

    @property
    def Resume(self) -> "ResumeAst":
        return ResumeAst(self)

    @property
    def RetrievalAndVerdictQueries(self) -> "RetrievalAndVerdictQueriesAst":
        return RetrievalAndVerdictQueriesAst(self)

    @property
    def RetrievalResponses(self) -> "RetrievalResponsesAst":
        return RetrievalResponsesAst(self)

    @property
    def SimpleRetrievalResponse(self) -> "SimpleRetrievalResponseAst":
        return SimpleRetrievalResponseAst(self)

    @property
    def TocContent(self) -> "TocContentAst":
        return TocContentAst(self)





class CompanyDetailsAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("CompanyDetails")
        self._properties: typing.Set[str] = set([ "name",  "corporate_identity_number",  "qr_code_url",  "website_link", ])
        self._props = CompanyDetailsProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "CompanyDetailsProperties":
        return self._props


class CompanyDetailsViewer(CompanyDetailsAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class CompanyDetailsProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def corporate_identity_number(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("corporate_identity_number"))

    @property
    def qr_code_url(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("qr_code_url"))

    @property
    def website_link(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("website_link"))

    

class DirectRetrievalResponseAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("DirectRetrievalResponse")
        self._properties: typing.Set[str] = set([ "ai_output",  "relevant_pages", ])
        self._props = DirectRetrievalResponseProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "DirectRetrievalResponseProperties":
        return self._props


class DirectRetrievalResponseViewer(DirectRetrievalResponseAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class DirectRetrievalResponseProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def ai_output(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("ai_output"))

    @property
    def relevant_pages(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("relevant_pages"))

    

class FactsFromPagesAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("FactsFromPages")
        self._properties: typing.Set[str] = set([ "facts", ])
        self._props = FactsFromPagesProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "FactsFromPagesProperties":
        return self._props


class FactsFromPagesViewer(FactsFromPagesAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class FactsFromPagesProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def facts(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("facts"))

    

class FinalVerdictAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("FinalVerdict")
        self._properties: typing.Set[str] = set([ "flag_status",  "detailed_reasoning",  "citations", ])
        self._props = FinalVerdictProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "FinalVerdictProperties":
        return self._props


class FinalVerdictViewer(FinalVerdictAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class FinalVerdictProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def flag_status(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("flag_status"))

    @property
    def detailed_reasoning(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("detailed_reasoning"))

    @property
    def citations(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("citations"))

    

class IsTocPageAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("IsTocPage")
        self._properties: typing.Set[str] = set([ "isTocPage", ])
        self._props = IsTocPageProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "IsTocPageProperties":
        return self._props


class IsTocPageViewer(IsTocPageAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class IsTocPageProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def isTocPage(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("isTocPage"))

    

class PageNumberAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PageNumber")
        self._properties: typing.Set[str] = set([ "is_page_number",  "page_number", ])
        self._props = PageNumberProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PageNumberProperties":
        return self._props


class PageNumberViewer(PageNumberAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class PageNumberProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def is_page_number(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("is_page_number"))

    @property
    def page_number(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("page_number"))

    

class PeopleInfoAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("PeopleInfo")
        self._properties: typing.Set[str] = set([ "name",  "designation", ])
        self._props = PeopleInfoProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "PeopleInfoProperties":
        return self._props


class PeopleInfoViewer(PeopleInfoAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class PeopleInfoProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def designation(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("designation"))

    

class QueriesFromPagesAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("QueriesFromPages")
        self._properties: typing.Set[str] = set([ "Queries", ])
        self._props = QueriesFromPagesProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "QueriesFromPagesProperties":
        return self._props


class QueriesFromPagesViewer(QueriesFromPagesAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class QueriesFromPagesProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def Queries(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("Queries"))

    

class ResumeAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("Resume")
        self._properties: typing.Set[str] = set([ "name",  "email",  "experience",  "skills", ])
        self._props = ResumeProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "ResumeProperties":
        return self._props


class ResumeViewer(ResumeAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class ResumeProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def name(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("name"))

    @property
    def email(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("email"))

    @property
    def experience(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("experience"))

    @property
    def skills(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("skills"))

    

class RetrievalAndVerdictQueriesAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("RetrievalAndVerdictQueries")
        self._properties: typing.Set[str] = set([ "hypothetical_factual_responses", ])
        self._props = RetrievalAndVerdictQueriesProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "RetrievalAndVerdictQueriesProperties":
        return self._props


class RetrievalAndVerdictQueriesViewer(RetrievalAndVerdictQueriesAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class RetrievalAndVerdictQueriesProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def hypothetical_factual_responses(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("hypothetical_factual_responses"))

    

class RetrievalResponsesAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("RetrievalResponses")
        self._properties: typing.Set[str] = set([ "hypothetical_factual_responses", ])
        self._props = RetrievalResponsesProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "RetrievalResponsesProperties":
        return self._props


class RetrievalResponsesViewer(RetrievalResponsesAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class RetrievalResponsesProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def hypothetical_factual_responses(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("hypothetical_factual_responses"))

    

class SimpleRetrievalResponseAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("SimpleRetrievalResponse")
        self._properties: typing.Set[str] = set([ "ai_output",  "relevant_pages", ])
        self._props = SimpleRetrievalResponseProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "SimpleRetrievalResponseProperties":
        return self._props


class SimpleRetrievalResponseViewer(SimpleRetrievalResponseAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class SimpleRetrievalResponseProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def ai_output(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("ai_output"))

    @property
    def relevant_pages(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("relevant_pages"))

    

class TocContentAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.class_("TocContent")
        self._properties: typing.Set[str] = set([ "toc_entries",  "toc_text", ])
        self._props = TocContentProperties(self._bldr, self._properties)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def props(self) -> "TocContentProperties":
        return self._props


class TocContentViewer(TocContentAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    
    def list_properties(self) -> typing.List[typing.Tuple[str, ClassPropertyViewer]]:
        return [(name, ClassPropertyViewer(self._bldr.property(name))) for name in self._properties]



class TocContentProperties:
    def __init__(self, bldr: ClassBuilder, properties: typing.Set[str]):
        self.__bldr = bldr
        self.__properties = properties

    

    @property
    def toc_entries(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("toc_entries"))

    @property
    def toc_text(self) -> ClassPropertyViewer:
        return ClassPropertyViewer(self.__bldr.property("toc_text"))

    



class FlagStatusAst:
    def __init__(self, tb: _TypeBuilder):
        _tb = tb._tb # type: ignore (we know how to use this private attribute)
        self._bldr = _tb.enum("FlagStatus")
        self._values: typing.Set[str] = set([ "FLAGGED",  "NOT_FLAGGED", ])
        self._vals = FlagStatusValues(self._bldr, self._values)

    def type(self) -> FieldType:
        return self._bldr.field()

    @property
    def values(self) -> "FlagStatusValues":
        return self._vals


class FlagStatusViewer(FlagStatusAst):
    def __init__(self, tb: _TypeBuilder):
        super().__init__(tb)

    def list_values(self) -> typing.List[typing.Tuple[str, EnumValueViewer]]:
        return [(name, EnumValueViewer(self._bldr.value(name))) for name in self._values]


class FlagStatusValues:
    def __init__(self, enum_bldr: EnumBuilder, values: typing.Set[str]):
        self.__bldr = enum_bldr
        self.__values = values

    

    @property
    def FLAGGED(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("FLAGGED"))
    

    @property
    def NOT_FLAGGED(self) -> EnumValueViewer:
        return EnumValueViewer(self.__bldr.value("NOT_FLAGGED"))
    

    


__all__ = ["TypeBuilder"]