###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off

file_map = {
    
    "clients.baml": "client<llm> BedrockClaudeIAM {\n  provider aws-bedrock\n  retry_policy Exponential\n  options {\n    model \"us.anthropic.claude-3-5-sonnet-20240620-v1:0\"\n    region \"us-east-1\"\n  }\n}\n\n\nclient<llm> BedrockHaikuIAM {\n  provider aws-bedrock\n  retry_policy Exponential\n  options {\n    model \"apac.anthropic.claude-3-haiku-20240307-v1:0\"\n    region \"ap-south-1\"\n  }\n}\n\nclient<llm> GPT4oMini {\n  provider openai\n  retry_policy Exponential\n  options {\n    model \"gpt-4o-mini\"\n  }\n}\n\n\n// https://docs.boundaryml.com/docs/snippets/clients/retry\nretry_policy Constant {\n  max_retries 3\n  // Strategy is optional\n  strategy {\n    type constant_delay\n    delay_ms 200\n  }\n}\n\nretry_policy Exponential {\n  max_retries 2\n  // Strategy is optional\n  strategy {\n    type exponential_backoff\n    delay_ms 300\n    multiplier 1.5\n    max_delay_ms 10000\n  }\n}\n",
    "direct_retrieval.baml": "class DirectRetrievalResponse {\r\n  ai_output string\r\n  relevant_pages string[]\r\n}\r\n\r\nfunction DirectRetrieval(ai_prompt: string, drhp_content: string) -> DirectRetrievalResponse {\r\n  client BedrockClaudeIAM\r\n  prompt #\"\r\n    {{_.role('system')}}\r\n    You are an expert DRHP analyst. Your task is to extract relevant information from the provided DRHP content based on the AI prompt.\r\n\r\n    **Content Structure:**\r\n    The DRHP content is organized as follows:\r\n    - PAGE NUMBER: The page number from the PDF\r\n    - Main content: The extracted text from the page\r\n    - FACTS: Key facts extracted from the page (if available)\r\n    - QUERIES: Related queries/questions for the page (if available)\r\n\r\n    **Instructions:**\r\n    1. Analyze ALL sections of the DRHP content (main content, facts, and queries)\r\n    2. Extract the most relevant information that answers the AI prompt\r\n    3. Look for information in:\r\n       - The main page content\r\n       - The FACTS section (often contains key data points)\r\n       - The QUERIES section (may contain relevant questions/context)\r\n    4. Format your response based on the AI prompt requirements:\r\n       - If the prompt asks for a list, provide a bulleted/numbered list\r\n       - If the prompt asks for a table, provide a table format\r\n       - If the prompt asks for a paragraph, provide a paragraph\r\n       - If the prompt asks for specific data points, provide them clearly\r\n    5. Extract page numbers from the content (format: \"PAGE NUMBER : X\")\r\n    6. Provide a comprehensive, accurate response based on the DRHP content\r\n\r\n    **Important:**\r\n    - Search through ALL content sections (main content, facts, queries)\r\n    - Only use information that is explicitly mentioned in the DRHP content\r\n    - If information is not available in any section, state \"Information not found in DRHP\"\r\n    - Maintain the original format and structure as requested in the AI prompt\r\n    - Be precise and factual in your response\r\n    - Return page numbers as a list of strings (e.g., [\"12\", \"27\", \"345\"])\r\n    - If you find relevant information in facts or queries sections, include it in your response\r\n\r\n    {{_.role('user')}}\r\n    **AI Prompt:**\r\n    {{ ai_prompt }}\r\n\r\n    **DRHP Content:**\r\n    {{ drhp_content }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n} ",
    "extract_toc_content.baml": "class TocContent {\r\n  toc_entries string[]\r\n  toc_text string\r\n}\r\n\r\nfunction ExtractTocContent(page_image: image) -> TocContent {\r\n  client BedrockClaudeIAM\r\n  \r\n  prompt #\"\r\n    {{_.role('system')}}\r\n    You are an expert at extracting table of contents from DRHP documents. Your task is to extract all table of contents entries from the provided page image.\r\n    \r\n    **Instructions:**\r\n    1. Identify all table of contents entries on the page\r\n    2. Extract both the section/topic names and their corresponding page numbers\r\n    3. Format each entry as: \"Section Name - Page Number\"\r\n    4. If there are subsections, include them with proper indentation or hierarchy\r\n    5. Extract the full text content of the table of contents for reference\r\n    \r\n    **Output Format:**\r\n    - toc_entries: Array of formatted TOC entries (e.g., [\"1. Introduction - 5\", \"2. Company Overview - 12\"])\r\n    - toc_text: Full text content of the table of contents page\r\n    \r\n    **Important:**\r\n    - Only extract actual table of contents entries\r\n    - Include page numbers when available\r\n    - Maintain the hierarchical structure if present\r\n    - If this is not a table of contents page, return empty arrays\r\n    \r\n    {{_.role('user')}}\r\n    Extract the table of contents from this page image. If this is not a table of contents page, return empty arrays.\r\n    \r\n    {{ page_image }}\r\n    \r\n    {{ ctx.output_format }}\r\n  \"#\r\n} ",
    "generators.baml": "// This helps use auto generate libraries you can use in the language of\r\n// your choice. You can have multiple generators if you use multiple languages.\r\n// Just ensure that the output_dir is different for each generator.\r\ngenerator target {\r\n    // Valid values: \"python/pydantic\", \"typescript\", \"ruby/sorbet\", \"rest/openapi\"\r\n    output_type \"python/pydantic\"\r\n\r\n    // Where the generated code will be saved (relative to baml_src/)\r\n    output_dir \"../\"\r\n\r\n    // The version of the BAML package you have installed (e.g. same version as your baml-py or @boundaryml/baml).\r\n    // The BAML VSCode extension version should also match this version.\r\n    version \"0.89.0\"\r\n\r\n    // Valid values: \"sync\", \"async\"\r\n    // This controls what `b.FunctionName()` will be (sync or async).\r\n    default_client_mode sync\r\n}\r\n",
    "get_company_details.baml": "// Defining a data model.\r\nclass CompanyDetails {\r\n  name string\r\n  corporate_identity_number string\r\n  qr_code_url string\r\n  website_link string\r\n}\r\n\r\nfunction ExtractCompanyDetails(text: string) -> CompanyDetails {\r\n  client BedrockClaudeIAM\r\n  prompt #\"\r\n Extract the following company details from the DRHP content:\r\n1. Company Name (full legal name)\r\n2. Corporate Identity Number (CIN)\r\n3. QR code URL (present at the top left corner, of the first page)\r\n4. Company website link\r\nFormat the response as a JSON object with these fields:\r\n- name: string (full legal name of the company)\r\n- corporate_identity_number: string (CIN number)\r\n- qr_code_url: string (URL of QR code if present, or empty string)\r\n- website_link: string (company's website URL)\r\nLook for these details in:\r\n- Company information section\r\n- Corporate details section\r\n- General information section\r\n- First few pages of the DRHP\r\nHere is the DRHP content to analyze:\r\n{{ text }}\r\n\r\n{{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n",
    "get_facts_from_pages.baml": "class FactsFromPages {\r\n  facts string[]  \r\n}\r\n\r\n\r\n\r\nfunction GetFactsFromPages(user_query: string) -> FactsFromPages {\r\n  client BedrockClaudeIAM\r\n  prompt #\"\r\n    {{_.role('system')}}\r\n    You are a seasoned financial‐document analyst. \r\n    Your goal is to distill the most important factual takeaways from a single page of a Draft Red Herring Prospectus.\r\n    Extract exactly **5** concise bullet-point facts.  \r\n    • Each bullet should be self-contained (no pronouns).  \r\n    • Focus on numbers, definitions, structural changes, or policy disclosures.  \r\n    • Return ONLY the 5 facts.\r\n\r\n    {{_.role('user')}}\r\n    {{ user_query }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}",
    "get_final_verdict.baml": "class FinalVerdict {\r\n  flag_status FlagStatus\r\n  detailed_reasoning string\r\n  citations string[]\r\n}\r\n\r\nenum FlagStatus {\r\n    FLAGGED\r\n    NOT_FLAGGED\r\n}\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ExtractFinalVerdict(insights: string, user_query: string) -> FinalVerdict {\r\n  client BedrockClaudeIAM \r\n  prompt #\"\r\n\r\n    {{_.role('system')}}\r\n    You work for an stock exchange, where you analyse the draft red herring prospectus (DRHP) of a company, and provide a final verdict on the compliance of the company with the regulations.\r\n\r\n    You have been given insights from the DRHP, by your junior analyst.\r\n    You need to analyse the insights, and provide a final verdict on the compliance of the company with the regulations.\r\n    The insights are: {{ insights }}\r\n\r\n    Your senior will ask for queries, and give you information from the DRHP and you need to provide the flag not flag verdict, with proper reasoning.\r\n\r\n    You need to provide the citations for the insights, in the format of \"Page Number\", just give the list of page numbers, which you used to come to the conclusion.\r\n\r\n    Output Format:\r\n    {\r\n      \"flag_status\": \"FLAGGED\" | \"NOT_FLAGGED\",\r\n      \"detailed_reasoning\": \"string\",\r\n      \"citations\": [\"12\", \"27\", \"345\", \"F-16\", \"A123\", \"217\", ...]\r\n    }\r\n\r\n    \r\n    citations is a LIST of page numbers, which you used to come to the conclusion. dont output anything else in the list other than the exact page number, no text, assumption etc, page number written literally.\r\n\r\n\r\n    {{_.role('user')}}\r\n    What do you think about the user query, should it be flagged or not?\r\n    {{ user_query }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n",
    "get_page_number.baml": "class PageNumber {\r\n  is_page_number bool\r\n  page_number string\r\n}\r\n\r\nfunction ExtractPageNumber(image: image) -> PageNumber {\r\n  client BedrockHaikuIAM\r\n  prompt #\"\r\n    {{_.role('system')}}\r\n    You are an expert OCR detector. You will get a thin strip of the page, and you need to do 2 things:\r\n    1. If the strip contains a page number.\r\n    2. If the strip contains a page number then extract the page number.\r\n\r\n    Page numbers can be of the following formats: -> (1, 2, 12, 345, 123, 345, A-12, A12, F-14, F-45, etc. etc. so it can be alphanumeric)\r\n\r\n    You might also get empty strips, or strips containing some other text.\r\n    In such cases just return empty string.\r\n    sample output:\r\n    {\r\n        is_page_number: true,\r\n        page_number: \"123\"\r\n    }\r\n    or\r\n    {\r\n        is_page_number: false,\r\n        page_number: \"\"\r\n    }\r\n\r\n    {{_.role('user')}}\r\n    {{ image }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}",
    "get_people_info.baml": "// Defining a data model.\r\nclass PeopleInfo {\r\n  name string\r\n  designation string\r\n}\r\n\r\nfunction ExtractPeopleInfo(text: string) -> PeopleInfo[] {\r\n  client BedrockClaudeIAM\r\n  prompt #\"\r\nYou need to extract information about key people and entities from the DRHP content. \r\nFor each person/entity mentioned in the beginning sections of the DRHP, extract:\r\n1. Full name of the person/entity\r\n2. Their name in the DRHP\r\n3. Their type (e.g. promoter, selller etc.)\r\nOnly extract people/entities that are:\r\n- Board members\r\n- Key Management Personnel\r\n- Company Secretary\r\n- Statutory Auditors\r\n- Book Running Lead Managers\r\n- Legal Advisors\r\n- Registrar\r\nHere is the DRHP content to analyze:\r\n{{ text }}\r\n\r\n{{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n",
    "get_queries_from_page.baml": "class QueriesFromPages {\r\n  Queries string[]  \r\n}\r\n\r\n\r\n\r\nfunction GetQueriesFromPages(user_query: string) -> QueriesFromPages {\r\n  client BedrockClaudeIAM\r\n  prompt #\"\r\n    {{_.role('system')}}\r\n    You are an expert QA-generator for investor documents. Your task is to craft investor-style questions that the given page answers.\r\n    This page is part of a Draft Red Herring Prospectus, submitted for filing with Stock Exchange and you are on the analysts analysing it.\r\n    Generate exactly **5** natural-language questions an investor might ask whose answers appear on this page.  \r\n    • Make them diverse (cover different topics).  \r\n    • Return ONLY the 5 questions, each on its own line.\r\n\r\n    {{_.role('user')}}\r\n    {{ user_query }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}",
    "get_retrieval_and_verdict_queries.baml": "class RetrievalAndVerdictQueries {\r\n  hypothetical_factual_responses string[]\r\n}\r\n\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ExtractRetrievalAndVerdictQueries(user_query: string) -> RetrievalAndVerdictQueries {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client BedrockClaudeIAM // Set OPENAI_API_KEY to use this client.\r\n  prompt #\"\r\n\r\n  {{_.role('system')}}\r\n**System Prompt for Generating Hypothetical DRHP Insights**\r\n\r\nYou are an intelligent assistant that takes a user's compliance question and simulates how relevant data would typically appear in a Draft Red Herring Prospectus (DRHP). Your output should include:\r\n\r\n1. **Hypothetical Factual Responses** – Provide realistic, plausible document-like paragraphs, as if extracted from the DRHP. The goal is that from these hypotheitcal paragraphs when compiled together should be able to asnwer the use query.\r\nThe user has also mentioned sections and heading where u can find the information, u need to include these into ur hypothetical factual responses.\r\n\r\n\r\n**Instructions:** \r\n\r\n* In **hypothetical_factual_responses**, do not ask retrieval questions or suggest checking sections.\r\n* Reference **exact section names** where appropriate, e.g., \"As disclosed in the 'Risk Factors' section...\".\r\n* Use realistic financial data and legal phrasing seen in offer documents.\r\n\r\n\r\nHere are some examples of hypothetical factual responses:\r\n\r\nExample 1:\r\n1. Good Manufacturing Practice Guidelines (GMP) \r\nThese guidelines are provided under Schedule T of Drug and Cosmetic Act, 1940. Good manufacturing \r\npractices (GMP) are the practices required in order to confirm the guidelines recommended by agencies \r\nthat  control  authorization  and  licensing  for  manufacture  and  sale  of  food,  drug  products,  and  active \r\npharmaceutical products. These guidelines provide minimum requirements that a pharmaceutical or a \r\nfood product manufacturer must meet to assure that the products are of high quality and do not pose \r\nany risk to the consumer or public. Good manufacturing practices, along with good laboratory practices \r\nand good clinical practices, are overseen by regulatory agencies in various sectors in India.\r\n\r\nExample 2:\r\n# DETAILS OF SHARE CAPITAL AS RESTATED  \r\n**ANNEXURE - V**  \r\n*(₹ In Lakhs)*\r\n\r\n| Particulars                           | As at March 31, 2024 | 2023   | 2022   |\r\n|--------------------------------------|-----------------------|--------|--------|\r\n| **EQUITY SHARE CAPITAL:**            |                       |        |        |\r\n| **AUTHORISED:**                      |                       |        |        |\r\n| Equity Share Capital of ₹10/- each   | 1,150.00              | 400.00 | 400.00 |\r\n| **TOTAL**                            | **1,150.00**          | 400.00 | 400.00 |\r\n\r\n|                                      |                       |        |        |\r\n| **ISSUED, SUBSCRIBED AND PAID UP**   |                       |        |        |\r\n| 76,00,000 Equity Shares of ₹10/- each fully paid  | 760.00 | 400.00 | 400.00 |\r\n| *(40,00,000 as on 31st March 2023 and 2022)* |       |        |        |\r\n| **TOTAL**                            | **760.00**            | 400.00 | 400.00 |\r\n\r\nExample 3:\r\n\r\nOther Income: \r\n  During the Fiscal year March 31, 2024, other income was ₹ 9.76 Lakhs. For financial year March 31, \r\n  2023, it was ₹ 20.78 Lakhs representing a decrease of 53%.  The Company has earned a profit on the \r\n  sales of fixed asset in the Fiscal year 2023, due to which there was increase in other income. \r\n  \r\nTotal Expenses: \r\n  The Total Expenses for the Fiscal year March 31,2024 stood at ₹ 7,518.33Lakhs. The total expenses \r\n  represented an increase of 13.61 % as compared to previous year which is ₹ 6,617.74 Lakhs due to the \r\n  factors described below: - \r\n \r\nCost of Material consumed: \r\n  Our cost of material consumed is ₹5,849.43 Lakhs for the Fiscal year March 31,2024 as compared to \r\n  ₹5,252.68 Lakhs for the Fiscal year March 31,2023 representing an increase of 11.36% due to increase \r\n  in our scale of operations. \r\n \r\nChanges in Inventories \r\n  Our changes in inventories is ₹ (210.74) Lakhs for the financial year March 31, 2024 which is ₹ (246.70) \r\n  Lakhs in the financial year March 31,2023\r\n\r\n  {{_.role('user')}}\r\n  Extract from this content:\r\n  {{ user_query }}\r\n\r\n  {{ ctx.output_format }}\r\n\"#\r\n}",
    "get_retrieval_responses.baml": "class RetrievalResponses {\n  hypothetical_factual_responses string[]\n}\n\nfunction ExtractRetrievalResponses(user_query: string) -> RetrievalResponses {\n  client GPT4oMini\n  prompt #\"\n    {{_.role('system')}}\n    You are an intelligent assistant that takes a user’s compliance question and simulates how relevant data would typically appear in a Draft Red Herring Prospectus (DRHP).\n\n    Your output should include:\n    1. **Hypothetical Factual Responses** – Provide realistic, plausible document-like content, as if extracted from the DRHP.\n\n    **Instructions:**\n    - If the relevant DRHP content is in bullet/point format, answer in bullet/point format.\n    - If the relevant DRHP content is in table format, answer in table format.\n    - If the relevant DRHP content is in paragraph format, answer in paragraph format.\n    - The answer format should match the original DRHP content and the intent of the AI prompt.\n    - If the exact section is not found, use the most similar section.\n\n    {{_.role('user')}}\n    {{ user_query }}\n\n    {{ ctx.output_format }}\n  \"#\n}",
    "get_toc_page.baml": "class IsTocPage {\n  isTocPage bool\n}\n\n// Create a function to extract the resume from a string.\nfunction ExtractTableOfContents(page_image: image) -> IsTocPage {\n\n  client BedrockClaudeIAM\n\n  prompt #\"\n\n    {{_.role('system')}}\n    You are a helpful assistant that verifies if a given image is a table of contents page.\n    Please analyze the following image and determine if it is a table of contents page.   \n    OUTPUT FORMAT:\n    {\n        isTocPage: bool\n    }\n    {{_.role('user')}}\n    Find out if this is image is a table of contents page.\n    {{ page_image }}\n\n    {{ ctx.output_format }}\n  \"#\n}\n\n",
    "resume.baml": "// Defining a data model.\r\nclass Resume {\r\n  name string\r\n  email string\r\n  experience string[]\r\n  skills string[]\r\n}\r\n\r\n// Create a function to extract the resume from a string.\r\nfunction ExtractResume(resume: string) -> Resume {\r\n  // Specify a client as provider/model-name\r\n  // you can use custom LLM params with a custom client name from clients.baml like \"client CustomHaiku\"\r\n  client \"openai/gpt-4o\" // Set OPENAI_API_KEY to use this client.\r\n  prompt #\"\r\n    Extract from this content:\r\n    {{ resume }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n}\r\n\r\n\r\n\r\n// Test the function with a sample resume. Open the VSCode playground to run this.\r\ntest vaibhav_resume {\r\n  functions [ExtractResume]\r\n  args {\r\n    resume #\"\r\n      Vaibhav Gupta\r\n      vbv@boundaryml.com\r\n\r\n      Experience:\r\n      - Founder at BoundaryML\r\n      - CV Engineer at Google\r\n      - CV Engineer at Microsoft\r\n\r\n      Skills:\r\n      - Rust\r\n      - C++\r\n    \"#\r\n  }\r\n}\r\n",
    "simple_retrieval.baml": "class SimpleRetrievalResponse {\r\n  ai_output string\r\n  relevant_pages string[]\r\n}\r\n\r\nfunction SimpleRetrieval(drhp_content: string, ai_prompt: string) -> SimpleRetrievalResponse {\r\n  client BedrockClaudeIAM\r\n  prompt #\"\r\n    {{_.role('system')}}\r\n    You are an expert DRHP analyst. Your task is to extract relevant information from the provided DRHP content based on the AI prompt.\r\n\r\n    **Instructions:**\r\n    1. Analyze the DRHP content and the AI prompt carefully\r\n    2. Extract the most relevant information that answers the AI prompt\r\n    3. Format your response based on the AI prompt requirements:\r\n       - If the prompt asks for a list, provide a bulleted/numbered list\r\n       - If the prompt asks for a table, provide a table format\r\n       - If the prompt asks for a paragraph, provide a paragraph\r\n       - If the prompt asks for specific data points, provide them clearly\r\n    4. Extract page numbers from the content (format: \"PAGE NUMBER : X\")\r\n    5. Provide a comprehensive, accurate response based on the DRHP content\r\n\r\n    **Important:**\r\n    - Only use information that is explicitly mentioned in the DRHP content\r\n    - If information is not available in the content, state \"Information not found in DRHP\"\r\n    - Maintain the original format and structure as requested in the AI prompt\r\n    - Be precise and factual in your response\r\n\r\n    {{_.role('user')}}\r\n    **DRHP Content:**\r\n    {{ drhp_content }}\r\n\r\n    **AI Prompt:**\r\n    {{ ai_prompt }}\r\n\r\n    {{ ctx.output_format }}\r\n  \"#\r\n} ",
}

def get_baml_files():
    return file_map