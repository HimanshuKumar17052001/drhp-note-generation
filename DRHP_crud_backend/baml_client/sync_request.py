###############################################################################
#
#  Welcome to Baml! To use this generated code, please run the following:
#
#  $ pip install baml-py
#
###############################################################################

# This file was generated by BAML: please do not edit it. Instead, edit the
# BAML files and re-generate this code.
#
# ruff: noqa: E501,F401
# flake8: noqa: E501,F401
# pylint: disable=unused-import,line-too-long
# fmt: off
from typing import Any, Dict, List, Optional, Union, TypedDict, Type
from typing_extensions import NotRequired, Literal

import baml_py

from . import types
from .types import Checked, Check
from .type_builder import TypeBuilder


class BamlCallOptions(TypedDict, total=False):
    tb: NotRequired[TypeBuilder]
    client_registry: NotRequired[baml_py.baml_py.ClientRegistry]


class HttpRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def DirectRetrieval(
        self,
        ai_prompt: str,drhp_content: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "DirectRetrieval",
        {
          "ai_prompt": ai_prompt,"drhp_content": drhp_content,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractCompanyDetails(
        self,
        text: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractCompanyDetails",
        {
          "text": text,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractFinalVerdict(
        self,
        insights: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractFinalVerdict",
        {
          "insights": insights,"user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractPageNumber(
        self,
        image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPageNumber",
        {
          "image": image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractPeopleInfo(
        self,
        text: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPeopleInfo",
        {
          "text": text,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractRetrievalAndVerdictQueries(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractRetrievalAndVerdictQueries",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractRetrievalResponses(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractRetrievalResponses",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractTableOfContents(
        self,
        page_image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractTableOfContents",
        {
          "page_image": page_image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def ExtractTocContent(
        self,
        page_image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractTocContent",
        {
          "page_image": page_image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GetFactsFromPages(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GetFactsFromPages",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def GetQueriesFromPages(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GetQueriesFromPages",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    
    def SimpleRetrieval(
        self,
        drhp_content: str,ai_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SimpleRetrieval",
        {
          "drhp_content": drhp_content,"ai_prompt": ai_prompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        False,
      )
    


class HttpStreamRequest:
    __runtime: baml_py.BamlRuntime
    __ctx_manager: baml_py.BamlCtxManager

    def __init__(self, runtime: baml_py.BamlRuntime, ctx_manager: baml_py.BamlCtxManager):
      self.__runtime = runtime
      self.__ctx_manager = ctx_manager

    
    def DirectRetrieval(
        self,
        ai_prompt: str,drhp_content: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "DirectRetrieval",
        {
          "ai_prompt": ai_prompt,"drhp_content": drhp_content,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractCompanyDetails(
        self,
        text: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractCompanyDetails",
        {
          "text": text,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractFinalVerdict(
        self,
        insights: str,user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractFinalVerdict",
        {
          "insights": insights,"user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractPageNumber(
        self,
        image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPageNumber",
        {
          "image": image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractPeopleInfo(
        self,
        text: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractPeopleInfo",
        {
          "text": text,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractResume(
        self,
        resume: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractResume",
        {
          "resume": resume,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractRetrievalAndVerdictQueries(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractRetrievalAndVerdictQueries",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractRetrievalResponses(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractRetrievalResponses",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractTableOfContents(
        self,
        page_image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractTableOfContents",
        {
          "page_image": page_image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def ExtractTocContent(
        self,
        page_image: baml_py.Image,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "ExtractTocContent",
        {
          "page_image": page_image,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GetFactsFromPages(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GetFactsFromPages",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def GetQueriesFromPages(
        self,
        user_query: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "GetQueriesFromPages",
        {
          "user_query": user_query,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    
    def SimpleRetrieval(
        self,
        drhp_content: str,ai_prompt: str,
        baml_options: BamlCallOptions = {},
    ) -> baml_py.HTTPRequest:
      __tb__ = baml_options.get("tb", None)
      if __tb__ is not None:
        tb = __tb__._tb # type: ignore (we know how to use this private attribute)
      else:
        tb = None
      __cr__ = baml_options.get("client_registry", None)

      return self.__runtime.build_request_sync(
        "SimpleRetrieval",
        {
          "drhp_content": drhp_content,"ai_prompt": ai_prompt,
        },
        self.__ctx_manager.get(),
        tb,
        __cr__,
        True,
      )
    


__all__ = ["HttpRequest", "HttpStreamRequest"]