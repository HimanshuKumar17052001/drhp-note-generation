import os
import pandas as pd
import pypandoc


def ensure_pandoc_is_installed():
    """
    Checks if pandoc is installed and on the PATH. If not, it attempts to
    download a local copy for pypandoc to use.
    """
    try:
        pypandoc.get_pandoc_version()
        print("✅ Pandoc is installed and accessible.")
    except OSError:
        print("Pandoc not found on system PATH. Attempting to download...")
        try:
            pypandoc.download_pandoc()
            print("✅ Pandoc downloaded successfully.")
        except Exception as e:
            print(f"❌ Failed to download Pandoc. Reason: {e}")
            raise


def create_report_from_excel(excel_path: str, output_pdf_path: str):
    """
    Reads an Excel file and generates a PDF report from specified columns.

    The PDF is generated by treating column 'A' as a heading and column 'D'
    as Markdown content for each row, with justified text alignment.

    Args:
        excel_path (str): The full path to the input Excel file.
        output_pdf_path (str): The full path where the output PDF will be saved.
    """
    print(f"Reading data from: {excel_path}")
    try:
        # Use openpyxl engine to handle .xlsx files
        df = pd.read_excel(excel_path, engine="openpyxl")
    except FileNotFoundError:
        print(f"❌ ERROR: The file was not found at {excel_path}")
        return
    except Exception as e:
        print(f"❌ ERROR: Failed to read the Excel file. Reason: {e}")
        return

    # Assuming the relevant columns are the first ('A') and fourth ('D')
    if len(df.columns) < 4:
        print(
            "❌ ERROR: The Excel file has fewer than 4 columns. Cannot find columns A and D."
        )
        return

    col_a_name = df.columns[0]
    col_d_name = df.columns[3]
    print(f"Using columns: '{col_a_name}' (as heading) and '{col_d_name}' (as content)")

    markdown_parts = []

    # Iterate over the DataFrame rows
    for index, row in df.iterrows():
        # Get content, ensuring it's a string and handling potential empty cells
        heading = str(row[col_a_name]) if pd.notna(row[col_a_name]) else ""
        content = str(row[col_d_name]) if pd.notna(row[col_d_name]) else ""

        if not heading and not content:
            continue  # Skip empty rows

        # Add the content for this row to our list
        # Using a level 2 heading for the topic and adding a page break for the next topic
        markdown_parts.append(f"## {heading}\n\n{content}\n\n\\newpage")

    if not markdown_parts:
        print("❌ ERROR: No content found in the specified columns to generate a PDF.")
        return

    # Combine all parts into a single Markdown string
    final_markdown = "\n".join(markdown_parts)

    print(f"\nGenerating PDF, please wait... This may take a moment.")
    print(f"Output will be saved to: {output_pdf_path}")

    try:
        # First, ensure Pandoc is available before attempting conversion.
        ensure_pandoc_is_installed()

        # Convert the combined Markdown string to a PDF using pandoc
        # We pass extra arguments to control the PDF engine and formatting
        pypandoc.convert_text(
            source=final_markdown,
            to="pdf",
            format="md",
            outputfile=output_pdf_path,
            extra_args=[
                "--pdf-engine=xelatex",
                "-V",
                "geometry:margin=1in",  # Set 1-inch margins
                "-V",
                "header-includes=\\usepackage{ragged2e}\\justifying",  # Enable justified text
            ],
        )
        print(f"\n✅ Successfully created PDF report at: {output_pdf_path}")

    except FileNotFoundError:
        print("\n❌ PANDOC ERROR: The 'pandoc' command was not found.")
        print(
            "Please ensure that Pandoc is installed and accessible in your system's PATH."
        )
        print("Installation instructions: https://pandoc.org/installing.html")
    except OSError as e:
        if "No such file or directory" in str(e) and "xelatex" in str(e):
            print("\n❌ LATEX ERROR: The 'xelatex' command was not found.")
            print(
                "Pandoc requires a LaTeX distribution to create PDFs (e.g., MiKTeX for Windows)."
            )
            print(
                "Please install a LaTeX distribution with 'xelatex' and ensure it's in your system's PATH."
            )
            print("MiKTeX download: https://miktex.org/download")
        else:
            print(f"\n❌ An OS error occurred during PDF generation: {e}")
            print(
                "This could be due to file permission issues or a problem with Pandoc/LaTeX."
            )
    except Exception as e:
        print(f"\n❌ An unexpected error occurred during PDF generation: {e}")


def main():
    """
    Main function to run the script.
    """
    # Use the output from the previous script as the input for this one.
    # The path to the processed checklist Excel file.
    input_excel_path = r"C:\Users\himan\Downloads\DRHP_Checklist_AI_with_outputs.xlsx"

    # Define the output path for the new PDF report.
    output_pdf_name = "Ather_DRHP_Noted_AI_Generated_Report.pdf"
    output_pdf_path = os.path.join(os.path.dirname(input_excel_path), output_pdf_name)

    create_report_from_excel(input_excel_path, output_pdf_path)


if __name__ == "__main__":
    main()
